AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'CodePipeline configuration for the map tile delivery service'

Parameters:
  ProjectStackName:
    Description: 'Stack name of the tile delivery API'
    Type: 'String'
    Default: 'imaginary-map-api'
  GeoJsonBucketName:
    Description: 'Name of the S3 bucket for GeoJSON files'
    Type: 'String'
  GitHubRepoOwnerName:
    Description: 'Name of the owner of the GitHub repository containing the source code of the map tile delivery service'
    Type: 'String'
  GitHubRepoName:
    Description: 'Name of the GitHub repository containing source of the source code of the map tile delivery service'
    Type: 'String'
  GitHubRepoBranch:
    Description: 'Name of the branch of the GitHub repository containing the source code of the map tile delivery service'
    Type: 'String'
    Default: 'master'
  GitHubRepoAccessTokenKey:
    Description: 'Name of the key associated with an access token for the GitHub repository, which is managed by AWS Secrets Manager'
    Type: 'String'
  ReleaseApproverEmail:
    Description: 'Email address of an approver of a release of an API'
    Type: 'String'
  ProjectTagValue:
    Description: 'Value of the "project" tag'
    Type: 'String'
    Default: 'imaginary-map'

Resources:
  # Reference: https://github.com/aws-samples/cookiecutter-aws-sam-pipeline/blob/f50dfee4f1dd2e618bd3c23098ce0e8b679d5c77/%7B%7Bcookiecutter.project_name%7D%7D/pipeline.yaml#L117
  TileApiCodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      ArtifactStore:
        Type: 'S3'
        Location: !Ref TileApiCodePipelineArtifactsBucket
      RoleArn: !GetAtt TileApiCodePipelineRole.Arn
      Stages:
        - Name: 'source'
          Actions:
            - Name: 'tile-api-checkout'
              ActionTypeId:
                Category: 'Source'
                Owner: 'ThirdParty'
                Provider: 'GitHub'
                Version: '1'
              Configuration:
                Owner: !Ref GitHubRepoOwnerName
                Repo: !Ref GitHubRepoName
                Branch: !Ref GitHubRepoBranch
                OAuthToken: !Sub '{{resolve:secretsmanager:${GitHubRepoAccessTokenKey}}}'
              OutputArtifacts:
                - Name: 'tile-api-source-code'
              RunOrder: 1
        - Name: 'build'
          Actions:
            - Name: 'tile-api-build'
              ActionTypeId:
                Category: 'Build'
                Owner: 'AWS'
                Provider: 'CodeBuild'
                Version: '1'
              Configuration:
                ProjectName: !Ref TileApiCodeBuildProject
                PrimarySource: 'tile-api-source-code'
              InputArtifacts:
                - Name: 'tile-api-source-code'
              OutputArtifacts:
                - Name: 'tile-api-template'
              RunOrder: 1
        - Name: 'deploy'
          Actions:
            - Name: 'tile-api-create-change-set'
              ActionTypeId:
                Category: 'Deploy'
                Owner: 'AWS'
                Provider: 'CloudFormation'
                Version: '1'
              Configuration:
                ActionMode: 'CHANGE_SET_REPLACE'
                StackName: !Sub '${ProjectStackName}'
                ChangeSetName: !Sub '${ProjectStackName}-change-set'
                Capabilities: 'CAPABILITY_IAM'
                TemplatePath: 'tile-api-template::cdn/api/api-template-packaged.yaml'
                ParameterOverrides: !Sub '{ "GeoJsonBucketName": "${GeoJsonBucketName}" }'
                RoleArn: !GetAtt TileApiCloudFormationRole.Arn
              InputArtifacts:
                - Name: 'tile-api-template'
              RunOrder: 1
            - Name: 'tile-api-execute-change-set'
              ActionTypeId:
                Category: 'Deploy'
                Owner: 'AWS'
                Provider: 'CloudFormation'
                Version: '1'
              Configuration:
                ActionMode: 'CHANGE_SET_EXECUTE'
                StackName: !Sub '${ProjectStackName}'
                ChangeSetName: !Sub '${ProjectStackName}-change-set'
                OutputFileName: 'tile-api-outputs.json'
              OutputArtifacts:
                - Name: 'tile-api-execute-change-set-artifacts'
              RunOrder: 2
            - Name: 'tile-api-release-development-stage'
              ActionTypeId:
                Category: 'Invoke'
                Owner: 'AWS'
                Provider: 'Lambda'
                Version: 1
              Configuration:
                FunctionName: !Ref ReleaseApi
                UserParameters: !Sub |-
                  {
                    "stageName": "development",
                    "apiLogicalId": "TileApi",
                    "stageConfiguration": {
                      "description": "stage for development",
                      "methodSettings": [
                        {
                          "resourcePath": "/*",
                          "httpMethod": "*",
                          "loggingLevel": "INFO",
                          "throttlingRateLimit": 100,
                          "throttlingBurstLimit": 500
                        }
                      ],
                      "variables": {
                        "GetIslandsTileVersion": "development",
                        "GetPapersTileVersion": "development"
                      },
                      "tags": {
                        "project": "${ProjectTagValue}"
                      }
                    },
                    "stackOutputsFileName": "tile-api-outputs.json"
                  }
              InputArtifacts:
                - Name: 'tile-api-execute-change-set-artifacts'
              RunOrder: 3
            - Name: 'tile-api-release-approval'
              ActionTypeId:
                Category: 'Approval'
                Owner: 'AWS'
                Provider: 'Manual'
                Version: '1'
              Configuration:
                NotificationArn: !Ref TileApiCodePipelineApprovalTopic
                CustomData: 'Test a development stage of a tile delivery service before approval'
              RunOrder: 4
            - Name: 'tile-api-release-get-islands-tile'
              ActionTypeId:
                Category: 'Invoke'
                Owner: 'AWS'
                Provider: 'Lambda'
                Version: 1
              Configuration:
                FunctionName: !Ref ReleaseFunction
                UserParameters: |-
                  {
                    "srcAlias": "development",
                    "destAlias": "production",
                    "description": "release for production",
                    "functionLogicalId": "GetIslandsTileFunction",
                    "apiLogicalId": "TileApi",
                    "permissionStatementId": "tile-api-invocation-permission",
                    "stackOutputsFileName": "tile-api-outputs.json"
                  }
              InputArtifacts:
                - Name: 'tile-api-execute-change-set-artifacts'
              RunOrder: 5
            - Name: 'tile-api-release-get-papers-tile'
              ActionTypeId:
                Category: 'Invoke'
                Owner: 'AWS'
                Provider: 'Lambda'
                Version: 1
              Configuration:
                FunctionName: !Ref ReleaseFunction
                UserParameters: |-
                  {
                    "srcAlias": "development",
                    "destAlias": "production",
                    "description": "release for production",
                    "functionLogicalId": "GetPapersTileFunction",
                    "apiLogicalId": "TileApi",
                    "permissionStatementId": "tile-api-invocation-premission",
                    "stackOutputsFileName": "tile-api-outputs.json"
                  }
              InputArtifacts:
                - Name: 'tile-api-execute-change-set-artifacts'
              RunOrder: 5
            - Name: 'tile-api-release-production-stage'
              ActionTypeId:
                Category: 'Invoke'
                Owner: 'AWS'
                Provider: 'Lambda'
                Version: 1
              Configuration:
                FunctionName: !Ref ReleaseApi
                UserParameters: !Sub |-
                  {
                    "stageName": "production",
                    "apiLogicalId": "TileApi",
                    "stageConfiguration": {
                      "description": "stage for production",
                      "methodSettings": [
                        {
                          "resourcePath": "/*",
                          "httpMethod": "*",
                          "loggingLevel": "INFO",
                          "throttlingRateLimit": 100,
                          "throttlingBurstLimit": 500
                        }
                      ],
                      "variables": {
                        "GetIslandsTileVersion": "production",
                        "GetPapersTileVersion": "production"
                      },
                      "tags": {
                        "project": "${ProjectTagValue}"
                      }
                    },
                    "stackOutputsFileName": "tile-api-outputs.json"
                  }
              InputArtifacts:
                - Name: 'tile-api-execute-change-set-artifacts'
              RunOrder: 6
      Tags:
        - Key: 'project'
          Value: !Ref ProjectTagValue

  # Reference: https://github.com/aws-samples/cookiecutter-aws-sam-pipeline/blob/f50dfee4f1dd2e618bd3c23098ce0e8b679d5c77/%7B%7Bcookiecutter.project_name%7D%7D/pipeline.yaml#L348
  TileApiCodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'codepipeline.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'code-pipeline-access'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'iam:PassRole'
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                  - 'lambda:InvokeAsyc'
                Resource: '*'
        - PolicyName: 'code-pipeline-artifacts-s3-bucket'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 's3:*'
                Resource: !Sub '${TileApiCodePipelineArtifactsBucket.Arn}/*'
        - PolicyName: 'code-pipeline-code-build-and-cloudformation-access'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuilds'
                Resource:
                  - !GetAtt TileApiCodeBuildProject.Arn
              - Effect: 'Allow'
                Action:
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:DeleteStack'
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:CreateChangeSet'
                  - 'cloudformation:ExecuteChangeSet'
                  - 'cloudformation:DeleteChangeSet'
                  - 'cloudformation:DescribeChangeSet'
                  - 'cloudformation:SetStackPolicy'
                  - 'cloudformation:ValidateTemplate'
                Resource:
                  - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProjectStackName}*/*'
                  - !Sub 'arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31'
        - PolicyName: 'code-pipeline-approval-notification'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'sns:Publish'
                Resource:
                  - !Ref TileApiCodePipelineApprovalTopic
      Tags:
        - Key: 'project'
          Value: !Ref ProjectTagValue

  TileApiCloudFormationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: 'Role of CloudFormation for the map tile delivery service'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'cloudformation.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'cloudformation'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'apigateway:*'
                  - 'codedeploy:*'
                  - 'lambda:*'
                  - 'cloudfront:*'
                  - 'cloudformation:CreateChangeSet'
                  - 'iam:GetRole'
                  - 'iam:CreateRole'
                  - 'iam:DeleteRole'
                  - 'iam:PutRolePolicy'
                  - 'iam:AttachRolePolicy'
                  - 'iam:DeleteRolePolicy'
                  - 'iam:DetachRolePolicy'
                  - 'iam:PassRole'
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                Resource: '*'
      Tags:
        - Key: 'project'
          Value: !Ref ProjectTagValue

  # Reference: https://github.com/aws-samples/cookiecutter-aws-sam-pipeline/blob/f50dfee4f1dd2e618bd3c23098ce0e8b679d5c77/%7B%7Bcookiecutter.project_name%7D%7D/pipeline.yaml#L80
  TileApiCodeBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Description: 'Build tile delivery API'
      Artifacts:
        Type: 'CODEPIPELINE'
      Source:
        Type: 'CODEPIPELINE'
        BuildSpec: 'cdn/buildspec.yaml'
      Environment:
        Type: 'LINUX_CONTAINER'
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:3.0'
        EnvironmentVariables:
          - Name: 'CODE_REPOSITORY'
            Value: !Ref TileApiCodePipelineArtifactsBucket
      LogsConfig:
        CloudWatchLogs:
          Status: 'ENABLED'
      Cache:
        Type: 'S3'
        Location: !Sub '${TileApiCodePipelineArtifactsBucket}/code-build-cache'
      ServiceRole: !GetAtt TileApiCodeBuildProjectRole.Arn
      Tags:
        - Key: 'project'
          Value: !Ref ProjectTagValue

  TileApiCodeBuildProjectRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'codebuild.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'code-build-logs'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/TileApiCodeBuildProject-*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/TileApiCodeBuildProject-*:*'
        - PolicyName: 'code-build-artifacts-bucket'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                Resource:
                  - !Sub '${TileApiCodePipelineArtifactsBucket.Arn}/*'
        - PolicyName: 'code-build-parameter-store'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'ssm:GetParameters'
                Resource: '*'

  ReleaseFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: 'Lambda function that releases a specified Lambda function'
      Runtime: 'python3.8'
      CodeUri: 'release-function/.'
      Handler: 'lambda_handler.lambda_handler'
      MemorySize: 128
      Timeout: 900 # = 15 minutes
      Role: !GetAtt ReleaseFunctionRole.Arn
      Tags:
        project: !Ref ProjectTagValue

  ReleaseFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: 'Role for the ReleaseFunction'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'tile-api-artifacts-access'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource: !Sub '${TileApiCodePipelineArtifactsBucket.Arn}/*'
        - PolicyName: 'tile-api-lambda-versioning'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'lambda:AddPermission'
                  - 'lambda:CreateAlias'
                  - 'lambda:GetAlias'
                  - 'lambda:GetPolicy'
                  - 'lambda:ListAliases'
                  - 'lambda:ListVersionsByFunction'
                  - 'lambda:UpdateAlias'
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProjectStackName}-*'
        - PolicyName: 'tile-api-pipeline-put-result'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  # GetJobDetails is necessary to call
                  # PutJobFailureResult and PutJobSuccessResult
                  - 'codepipeline:GetJobDetails'
                  - 'codepipeline:PutJobFailureResult'
                  - 'codepipeline:PutJobSuccessResult'
                Resource:
                  # only a wildcard (*) is accepted.
                  # https://docs.aws.amazon.com/codepipeline/latest/userguide/permissions-reference.html
                  - '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Tags:
        - Key: 'project'
          Value: !Ref ProjectTagValue

  ReleaseApi:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: 'Lambda function that releases a specified API'
      Runtime: 'python3.8'
      CodeUri: 'release-api/.'
      Handler: 'lambda_handler.lambda_handler'
      MemorySize: 128
      Timeout: 900 # 15 minutes
      Role: !GetAtt ReleaseApiRole.Arn
      Tags:
        project: !Ref ProjectTagValue

  ReleaseApiRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: 'Role for the ReleaseApi'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'tile-api-artifacts-access'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource: !Sub '${TileApiCodePipelineArtifactsBucket.Arn}/*'
        - PolicyName: 'tile-api-gateway-staging'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'apigateway:*'
                Resource: !Sub 'arn:aws:apigateway:${AWS::Region}:*'
        - PolicyName: 'tile-api-pipeline-put-result'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'codepipeline:GetJobDetails'
                  - 'codepipeline:PutJobFailureResult'
                  - 'codepipeline:PutJobSuccessResult'
                Resource:
                  - '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Tags:
        - Key: 'project'
          Value: !Ref ProjectTagValue

  TileApiCodePipelineApprovalTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: 'SNS topic to approve a release of a map vector tile delivery API'
      Subscription:
        - Protocol: 'email'
          Endpoint: !Ref ReleaseApproverEmail
      Tags:
        - Key: 'project'
          Value: !Ref ProjectTagValue

  TileApiCodePipelineArtifactsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      Tags:
        - Key: 'project'
          Value: !Ref ProjectTagValue
    DeletionPolicy: 'Retain'

Outputs:
  TileApiCodePipelineApprovalTopicArn:
    Description: 'ARN of a topic to approve a release of an API'
    Value: !Ref TileApiCodePipelineApprovalTopic
  TileApiCodePipelineArtifactsBucketName:
    Description: 'Name of the S3 bucket for CodePipeline artifacts'
    Value: !Ref TileApiCodePipelineArtifactsBucket

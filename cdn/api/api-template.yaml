AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'Template for the map tile deliver API'

Parameters:
  GeoJsonBucketName:
    Description: 'Name of an S3 bucket that contains GeoJSON files'
    Type: 'String'
  IslandsGeoJsonVersion:
    Description: 'Version of the GeoJSON file for islands'
    Type: 'String'
    Default: 'v2'
  PapersGeoJsonVersion:
    Description: 'Version of the GeoJSON file for papers'
    Type: 'String'
    Default: 'v2'
  ProjectTagValue:
    Description: 'Value of a "project" tag'
    Type: 'String'
    Default: 'imaginary-map'

Resources:
  GetIslandsTileFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: 'Generates a map vector tile at a given coordinate'
      Runtime: 'go1.x'
      CodeUri: 'get-islands-tile'
      Handler: 'main'
      Timeout: 6 # it took about 1400ms at benchmark
      Role: !GetAtt GetIslandsTileFunctionRole.Arn
      Environment:
        Variables:
          GEO_JSON_BUCKET_NAME: !Ref GeoJsonBucketName
          ISLANDS_GEO_JSON_VERSION: !Ref IslandsGeoJsonVersion
      # lets "development" points to the latest version
      AutoPublishAlias: 'development'
      Tags:
        project: !Ref ProjectTagValue
    DependsOn:
      # makes sure that this function is released before the policy
      - GetGeoJsonPolicy
  GetIslandsTileFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: 'Role of the GetIslandsTile function'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Tags:
        - Key: 'project'
          Value: !Ref ProjectTagValue

  GetPapersTileFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: 'Generates a map vector tile at a given coordinate'
      Runtime: 'go1.x'
      CodeUri: 'get-papers-tile/.'
      Handler: 'main'
      # you may think increasing MemorySize will charge you more.
      # but it actually does not matter
      # because the processing gets faster with lager memory.
      # it took 6000ms with 128MB and 1700ms with 512MB.
      MemorySize: 512
      Timeout: 6 # it took about 1700ms at benchmark
      Role: !GetAtt GetPapersTileFunctionRole.Arn
      Environment:
        Variables:
          GEO_JSON_BUCKET_NAME: !Ref GeoJsonBucketName
          PAPERS_GEO_JSON_VERSION: !Ref PapersGeoJsonVersion
      # lets "development" points to the latest version
      AutoPublishAlias: 'development'
      Tags:
        project: !Ref ProjectTagValue
    DependsOn:
      # makes sure that this function is released before the policy
      - GetGeoJsonPolicy
  GetPapersTileFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: 'Role of the GetPapersTile function'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Tags:
        - Key: 'project'
          Value: !Ref ProjectTagValue

  GetGeoJsonPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: 'get-geo-json-policy'
      Roles:
        - !Ref GetIslandsTileFunctionRole
        - !Ref GetPapersTileFunctionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource: !Sub 'arn:aws:s3:::${GeoJsonBucketName}/*'

  # REST API for map vector tiles
  TileApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'map-vector-tile-api'
      Description: 'REST API that serves map vector tiles'
      BinaryMediaTypes:
        - 'application/x-protobuf'
      Tags:
        - Key: 'project'
          Value: !Ref ProjectTagValue

  # allows TileApi to call GetIslandsTileFunction@development
  GetIslandsTileFunctionDevelopmentApiPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Sub '${GetIslandsTileFunction.Arn}:development'
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TileApi}/*/GET/*'
    DependsOn:
      # implicit resource name introduced by SAM
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-generated-resources-function.html#sam-specification-generated-resources-function-autopublishalias
      - GetIslandsTileFunctionAliasdevelopment

  # allows TileApi to call GetPapersTileFunction@development
  GetPapersTileFunctionDevelopmentApiPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Sub '${GetPapersTileFunction.Arn}:development'
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TileApi}/*/GET/*'
    DependsOn:
      # implicit resource name introduced by SAM
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-generated-resources-function.html#sam-specification-generated-resources-function-autopublishalias
      - GetIslandsTileFunctionAliasdevelopment

  # /{zoom}
  TileApiZoomResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref TileApi
      ParentId: !GetAtt TileApi.RootResourceId
      PathPart: '{zoom}'

  # /{zoom}/{x}
  TileApiZoomXResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref TileApi
      ParentId: !Ref TileApiZoomResource
      PathPart: '{x}'

  # /{zoom}/{x}/{y}
  TileApiZoomXYResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref TileApi
      ParentId: !Ref TileApiZoomXResource
      PathPart: '{y}'

  # /{zoom}/{x}/{y}/islands.pbf
  TileApiZoomXYIslandsResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref TileApi
      ParentId: !Ref TileApiZoomXYResource
      PathPart: 'islands.pbf'
  # GET /{zoom}/{x}/{y}/islands.pbf
  # stage variable
  # - GetIslandsTilesVersion: a version of the GetIslandsTile function
  GetTileApiZoomXYIslands:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      OperationName: 'GET map vector tile at a given coordinate'
      RestApiId: !Ref TileApi
      ResourceId: !Ref TileApiZoomXYIslandsResource
      HttpMethod: 'GET'
      AuthorizationType: 'NONE'
      Integration:
        Type: 'AWS'
        Uri: !Join
          - ''
          - - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIslandsTileFunction.Arn}'
            # ${stageVariables.xyz} is not a template substitution
            - ':${stageVariables.GetIslandsTileVersion}/invocations'
        IntegrationHttpMethod: 'POST'
        PassthroughBehavior: 'WHEN_NO_MATCH'
        RequestTemplates:
          'application/json': |
            {
              "Zoom": $input.params('zoom'),
              "X": $input.params('x'),
              "Y": $input.params('y')
            }
        IntegrationResponses:
          - StatusCode: 200
            ContentHandling: 'CONVERT_TO_BINARY'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Content-Type: "'application/x-protobuf'"
              method.response.header.Content-Encoding: "'gzip'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Content-Type: false
            method.response.header.Content-Encoding: false

  # /{zoom}/{x}/{y}/papers.pbf
  TileApiZoomXYPapersResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref TileApi
      ParentId: !Ref TileApiZoomXYResource
      PathPart: 'papers.pbf'
  # GET /{zoom}/{x}/{y}/papers.pbf
  # stage variable
  # - GetPapersTileVersion: a version of the GetPapersTile function
  GetTileApiZoomXYPapers:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      OperationName: 'GET map vector tile at a given coordinate'
      RestApiId: !Ref TileApi
      ResourceId: !Ref TileApiZoomXYPapersResource
      HttpMethod: 'GET'
      AuthorizationType: 'NONE'
      Integration:
        Type: 'AWS'
        Uri: !Join
          - ''
          - - !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPapersTileFunction.Arn}'
            # ${stageVariables.xyz} is not a template substitution
            - ':${stageVariables.GetPapersTileVersion}/invocations'
        IntegrationHttpMethod: 'POST'
        PassthroughBehavior: 'WHEN_NO_MATCH'
        RequestTemplates:
          'application/json': |
            {
              "Zoom": $input.params('zoom'),
              "X": $input.params('x'),
              "Y": $input.params('y')
            }
        IntegrationResponses:
          - StatusCode: 200
            ContentHandling: 'CONVERT_TO_BINARY'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Content-Type: "'application/x-protobuf'"
              method.response.header.Content-Encoding: "'gzip'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Content-Type: false
            method.response.header.Content-Encoding: false

  # CloudFront distribution
  TileApiDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: !Sub '${AWS::StackName}-tile-api'
            DomainName: !Sub '${TileApi}.execute-api.${AWS::Region}.amazonaws.com'
            OriginPath: '/production'
            CustomOriginConfig:
              OriginProtocolPolicy: 'https-only'
              OriginSSLProtocols:
                - 'TLSv1.2'
        DefaultCacheBehavior:
          TargetOriginId: !Sub '${AWS::StackName}-tile-api'
          Compress: true
          ForwardedValues:
            QueryString: false
          ViewerProtocolPolicy: 'https-only'
        PriceClass: 'PriceClass_200'
        Logging:
          Bucket: !GetAtt AccessLogBucket.DomainName
          Prefix: 'map-tile-cdn/'
          IncludeCookies: false
      Tags:
        - Key: 'project'
          Value: !Ref ProjectTagValue

  AccessLogBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: 'LogDeliveryWrite'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: 'project'
          Value: !Ref ProjectTagValue

Outputs:
  GetIslandsTileFunctionArn:
    Description: 'ARN of the GetIslandsTile function'
    Value: !GetAtt GetIslandsTileFunction.Arn
  GetIslandsTileFunctionName:
    Description: 'Name of the GetIslandsTile function'
    Value: !Ref GetIslandsTileFunction
  GetPapersTileFunctionArn:
    Description: 'ARN of the GetPapersTile function'
    Value: !GetAtt GetPapersTileFunction.Arn
  GetPapersTileFunctionName:
    Description: 'Name of the GetPapersTile function'
    Value: !Ref GetPapersTileFunction
  TileApiId:
    Description: 'ID of the TileApi'
    Value: !Ref TileApi
  TileApiDevelopmentStageUrl:
    Description: 'URL of the development stage of the TileApi'
    Value: !Sub 'https://${TileApi}.execute-api.${AWS::Region}.amazonaws.com/development'
  TileApiDistributionDomainName:
    Description: 'Domain name of the map vector tile CDN'
    Value: !GetAtt TileApiDistribution.DomainName
  AccessLogBucketName:
    Description: 'Name of the S3 bucket for access logs from CloudFront'
    Value: !Ref AccessLogBucket
